# Next.js Authentication System Tutorial

## Introduction
This tutorial explains how to implement a complete authentication system in Next.js using NextAuth.js, MongoDB, and Google OAuth. We'll build a system that supports both email/password and Google sign-in methods.

## Project Structure
```
src/
├── app/
│   ├── api/
│   │   └── auth/
│   │       ├── [...nextauth]/
│   │       │   └── route.js    # NextAuth.js configuration
│   │       └── register/
│   │           └── route.js    # User registration endpoint
├── components/
│   └── auth/
│       └── LoginModal.js       # Authentication modal component
├── lib/
│   └── mongodb.js             # MongoDB connection utility
├── middleware.js              # Authentication middleware
└── models/
    └── User.js               # User model schema
```

## 1. Environment Setup

First, create a `.env.local` file in your project root:

```env
# MongoDB Connection
MONGODB_URI=mongodb://localhost:27017/pak_otp_db

# NextAuth Configuration
NEXTAUTH_SECRET="k+jg/bPZz8tBeWRIMtnDsStGvfGdGayFHPYTYK7ehJs="
NEXTAUTH_URL=http://localhost:3000

# Google OAuth Credentials
GOOGLE_CLIENT_ID="your-google-client-id"
GOOGLE_CLIENT_SECRET="your-google-client-secret"
```

### Understanding Environment Variables:
- MONGODB_URI: Your MongoDB connection string
- NEXTAUTH_SECRET: A secret key for JWT encryption (generate using `openssl rand -base64 32`)
- NEXTAUTH_URL: Your application's base URL
- GOOGLE_CLIENT_ID & GOOGLE_CLIENT_SECRET: Obtained from Google Cloud Console

## 2. Database Connection (src/lib/mongodb.js)

```javascript
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function connectDB() {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });
  }

  try {
    cached.conn = await cached.promise;
  } catch (e) {
    cached.promise = null;
    throw e;
  }

  return cached.conn;
}

export default connectDB;
```

### Code Explanation:
1. We import mongoose for MongoDB interaction
2. We implement connection caching to prevent multiple connections
3. The connection is reused if it exists, improving performance
4. Error handling ensures robust database connectivity
5. Connection options are configured for optimal performance

## 3. User Model (src/models/User.js)

```javascript
import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Please provide a name'],
  },
  email: {
    type: String,
    required: [true, 'Please provide an email'],
    unique: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please provide a valid email'],
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
    minlength: [6, 'Password should be at least 6 characters long'],
    select: false, // Don't include password in queries by default
  },
  role: {
    type: String,
    enum: ['user', 'admin'],
    default: 'user',
  },
}, {
  timestamps: true, // Adds createdAt and updatedAt fields
});

export default mongoose.models.User || mongoose.model('User', UserSchema);
```

### Schema Explanation:
1. name: Required string field for user's name
2. email: 
   - Required and unique
   - Includes regex validation for email format
   - Must be unique in the database
3. password:
   - Minimum 6 characters
   - select: false prevents password from being returned in queries
4. role:
   - Enum field for user roles
   - Defaults to 'user'
5. timestamps: Automatically manages createdAt and updatedAt fields

## 4. NextAuth Configuration (src/app/api/auth/[...nextauth]/route.js)

```javascript
import NextAuth from 'next-auth';
import GoogleProvider from 'next-auth/providers/google';
import CredentialsProvider from 'next-auth/providers/credentials';
import bcrypt from 'bcryptjs';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';

const authOptions = {
  providers: [
    // 1. Google Provider Configuration
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
    
    // 2. Credentials Provider Configuration
    CredentialsProvider({
      name: 'credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error('Please enter email and password');
        }

        await connectDB();
        
        // Find user and include password field
        const user = await User.findOne({ email: credentials.email }).select('+password');
        
        if (!user) {
          throw new Error('No user found with this email');
        }

        // Verify password
        const isPasswordMatch = await bcrypt.compare(credentials.password, user.password);

        if (!isPasswordMatch) {
          throw new Error('Invalid password');
        }

        // Return user without password
        return {
          id: user._id.toString(),
          name: user.name,
          email: user.email,
          role: user.role,
        };
      }
    })
  ],

  // 3. Callbacks Configuration
  callbacks: {
    // Extend JWT with user role
    async jwt({ token, user }) {
      if (user) {
        token.role = user.role;
      }
      return token;
    },
    // Add role to session
    async session({ session, token }) {
      if (session?.user) {
        session.user.role = token.role;
      }
      return session;
    }
  },

  // 4. Pages Configuration
  pages: {
    signIn: '/', // Use home page for sign in
  },

  // 5. Session Configuration
  session: {
    strategy: 'jwt',
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },

  // 6. JWT Configuration
  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
```

### NextAuth Configuration Breakdown:

1. **Providers Setup**:
   - GoogleProvider: Handles Google OAuth authentication
   - CredentialsProvider: Handles email/password authentication

2. **Authorize Function**:
   - Validates credentials
   - Connects to database
   - Finds user by email
   - Verifies password using bcrypt
   - Returns user data without password

3. **Callbacks**:
   - jwt: Extends JWT token with user role
   - session: Adds role to session data

4. **Security Features**:
   - JWT-based sessions
   - 30-day session lifetime
   - Secure password comparison
   - Error handling

## 5. Registration API (src/app/api/auth/register/route.js)

```javascript
import { NextResponse } from 'next/server';
import bcrypt from 'bcryptjs';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';

export async function POST(req) {
  try {
    // 1. Extract and validate input
    const { name, email, password } = await req.json();

    if (!name || !email || !password) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // 2. Connect to database
    await connectDB();

    // 3. Check for existing user
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return NextResponse.json(
        { error: 'User already exists' },
        { status: 400 }
      );
    }

    // 4. Hash password
    const hashedPassword = await bcrypt.hash(password, 12);

    // 5. Create user
    const user = await User.create({
      name,
      email,
      password: hashedPassword,
    });

    // 6. Prepare response (exclude password)
    const userWithoutPassword = {
      id: user._id.toString(),
      name: user.name,
      email: user.email,
    };

    // 7. Return success response
    return NextResponse.json(
      { message: 'User created successfully', user: userWithoutPassword },
      { status: 201 }
    );
  } catch (error) {
    console.error('Registration error:', error);
    return NextResponse.json(
      { error: 'Error creating user' },
      { status: 500 }
    );
  }
}
```

### Registration API Breakdown:

1. **Input Validation**:
   - Extracts data from request body
   - Validates required fields
   - Returns 400 if validation fails

2. **User Creation Process**:
   - Connects to database
   - Checks for existing user
   - Hashes password securely
   - Creates new user record
   - Returns sanitized user data

3. **Security Measures**:
   - Password hashing with bcrypt
   - Input validation
   - Error handling
   - Safe response formatting

## 6. Authentication Modal (LoginModal.js)

The LoginModal component provides a unified interface for all authentication methods. Key features:

1. **State Management**:
```javascript
const [isLogin, setIsLogin] = useState(true);
const [formData, setFormData] = useState({
  name: '',
  email: '',
  password: '',
});
const [loading, setLoading] = useState(false);
const [error, setError] = useState('');
```

2. **Form Handling**:
```javascript
const handleSubmit = async (e) => {
  e.preventDefault();
  setLoading(true);
  setError('');

  try {
    if (isLogin) {
      // Handle Sign In
      const result = await signIn('credentials', {
        email: formData.email,
        password: formData.password,
        redirect: false,
      });

      if (result?.error) {
        setError(result.error);
      } else {
        router.push('/dashboard');
        router.refresh();
        onClose();
      }
    } else {
      // Handle Sign Up
      const res = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(data.error || 'Something went wrong');
      }

      // Auto sign in after registration
      const signInResult = await signIn('credentials', {
        email: formData.email,
        password: formData.password,
        redirect: false,
      });

      if (signInResult?.error) {
        setError(signInResult.error);
      } else {
        router.push('/dashboard');
        router.refresh();
        onClose();
      }
    }
  } catch (err) {
    setError(err.message || 'An error occurred');
  } finally {
    setLoading(false);
  }
};
```

### Modal Features:

1. **Form States**:
   - Login/Register toggle
   - Loading states
   - Error handling
   - Input validation

2. **Authentication Methods**:
   - Email/Password sign in
   - Google OAuth sign in
   - User registration
   - Automatic sign-in after registration

3. **UI Components**:
   - Form inputs with validation
   - Loading indicators
   - Error messages
   - Social login buttons

## Security Best Practices

1. **Password Security**:
   - Bcrypt hashing (12 rounds)
   - Password field excluded from queries
   - Minimum length requirement

2. **Session Security**:
   - JWT-based sessions
   - 30-day expiration
   - Secure session storage
   - CSRF protection

3. **API Security**:
   - Input validation
   - Error handling
   - Rate limiting (recommended)
   - CORS protection

## Google OAuth Setup

1. **Redirect URIs Configuration**:
   ```
   Development: http://localhost:3000/api/auth/callback/google
   Production: https://your-domain.com/api/auth/callback/google
   ```

2. **Required Scopes**:
   - email
   - profile

## Dependencies

```json
{
  "dependencies": {
    "next-auth": "^4.x.x",
    "bcryptjs": "^2.4.x",
    "mongoose": "^7.x.x"
  }
}
```

## Testing the Authentication System

1. **Start the Development Server**:
   ```bash
   npm run dev
   ```

2. **Test Registration**:
   - Click "Sign up"
   - Fill in name, email, and password
   - Submit form
   - Should automatically sign in and redirect to dashboard

3. **Test Sign In**:
   - Click "Sign in"
   - Enter email and password
   - Should redirect to dashboard

4. **Test Google Sign In**:
   - Click "Continue with Google"
   - Select Google account
   - Should redirect to dashboard

## Troubleshooting

1. **Database Connection Issues**:
   - Verify MONGODB_URI in .env.local
   - Ensure MongoDB is running
   - Check connection logs

2. **Google OAuth Issues**:
   - Verify credentials in Google Cloud Console
   - Check redirect URI configuration
   - Ensure scopes are properly set

3. **Authentication Errors**:
   - Check browser console for errors
   - Verify environment variables
   - Check NextAuth configuration

## Future Enhancements

1. **Security**:
   - Implement rate limiting
   - Add two-factor authentication
   - Enhanced password requirements

2. **Features**:
   - Password reset functionality
   - Email verification
   - Session management UI

3. **User Experience**:
   - Remember me functionality
   - Progressive form validation
   - Social login expansion
